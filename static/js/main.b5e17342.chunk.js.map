{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Content","App","props","state","popped","console","log","this","setState","onClick","popOut","onOpen","popupOpened","onClose","popupClosed","popIn","React","PureComponent","PopupWindow","window","timer","undefined","container","popupWindow","open","setInterval","closed","Array","from","document","styleSheets","forEach","stylesheet","css","href","newStyleElement","createElement","rel","head","appendChild","cssRules","length","rule","createTextNode","cssText","body","clearInterval","close","ReactDOM","createPortal","children","Boolean","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qNAGA,SAASA,IACP,OAAO,4CASF,IAAMC,EAAb,kDACE,WAAYC,GAAY,IAAD,8BACrB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,MAHW,EADzB,oDASIC,QAAQC,IAAI,SACZC,KAAKC,SAAS,CAAEJ,OAAQ,SAV5B,+BAcIC,QAAQC,IAAI,UACZC,KAAKC,SAAS,CAAEJ,OAAQ,cAf5B,oCAmBIC,QAAQC,IAAI,eACZC,KAAKC,SAAS,CAAEJ,OAAQ,UApB5B,oCAwBIC,QAAQC,IAAI,eACZC,KAAKC,SAAS,CAAEJ,OAAQ,SAzB5B,+BA4BY,IAAD,OACP,MAA0B,OAAtBG,KAAKJ,MAAMC,OAEX,oCACE,kBAACJ,EAAD,MACA,4BAAQS,QAAS,kBAAM,EAAKC,WAA5B,YAG2B,YAAtBH,KAAKJ,MAAMC,OAElB,oCACE,kBAAC,EAAD,CACEO,OAAQ,kBAAM,EAAKC,eACnBC,QAAS,kBAAM,EAAKC,gBAEpB,kBAACd,EAAD,OAEF,kBAACA,EAAD,MACA,4BAAQS,QAAS,kBAAM,EAAKC,WAA5B,YAKF,oCACE,kBAAC,EAAD,CACEC,OAAQ,kBAAM,EAAKC,eACnBC,QAAS,kBAAM,EAAKC,gBAEpB,kBAACd,EAAD,OAEF,4BAAQS,QAAS,kBAAM,EAAKM,UAA5B,eA1DV,GAAyBC,IAAMC,eA0EzBC,E,kDAOJ,WAAYhB,GAA0B,IAAD,8BACnC,cAAMA,IAJRiB,YAGqC,IAFrCC,WAEqC,EAEnC,EAAKD,YAASE,EACd,EAAKlB,MAAQ,CACXmB,eAAWD,GAJsB,E,gEAQhB,IAAD,OACZE,EAAcJ,OAAOK,KAAK,GAAI,GAAI,yBACxC,GAAKD,EAAL,CAGAhB,KAAKY,OAASI,EAEVhB,KAAKL,MAAMW,UACbN,KAAKa,MAAQD,OAAOM,aAAY,WACzB,EAAKN,SAAU,EAAKA,OAAOO,QAC1B,EAAKxB,MAAMW,SACb,EAAKX,MAAMW,YAGd,MAGec,MAAMC,KAAKC,SAASC,aAC5BC,SAAQ,SAAAC,GAClB,IAAMC,EAAMD,EAEZ,GAAIA,EAAWE,KAAM,CACnB,IAAMC,EAAkBN,SAASO,cAAc,QAC/CD,EAAgBE,IAAM,aACtBF,EAAgBD,KAAOF,EAAWE,KAClCX,EAAYM,SAASS,KAAKC,YAAYJ,QACjC,GAAIF,GAAOA,EAAIO,UAAYP,EAAIO,SAASC,OAAS,EAAG,CACzD,IAAMN,EAAkBN,SAASO,cAAc,SAC/CT,MAAMC,KAAKK,EAAIO,UAAUT,SAAQ,SAAAW,GAC/BP,EAAgBI,YAAYV,SAASc,eAAeD,EAAKE,aAE3DrB,EAAYM,SAASS,KAAKC,YAAYJ,OAI1C,IAAMb,EAAYf,KAAKY,OAAOU,SAASO,cAAc,OACrD7B,KAAKY,OAAOU,SAASgB,KAAKN,YAAYjB,GACtCf,KAAKC,SAAS,CACZc,cAGEf,KAAKL,MAAMS,QACbJ,KAAKL,MAAMS,Y,6CAKTJ,KAAKa,QACPD,OAAO2B,cAAcvC,KAAKa,OAC1Bb,KAAKa,WAAQC,GAEXd,KAAKY,QACPZ,KAAKY,OAAO4B,U,+BAKd,OAAIxC,KAAKJ,MAAMmB,UACN0B,IAASC,aAAa1C,KAAKL,MAAMgD,SAAU3C,KAAKJ,MAAMmB,WAEtD,S,GA3EaN,IAAMC,eC3EZkC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNN,IAASO,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,QD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMC,a","file":"static/js/main.b5e17342.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Content() {\n  return <p>Content here!</p>;\n}\n\ntype PoppedState = 'in' | 'waiting' | 'out';\n\ninterface AppState {\n  popped: PoppedState;\n}\n\nexport class App extends React.PureComponent<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      popped: 'in',\n    };\n  }\n\n  popIn() {\n    console.log('popIn');\n    this.setState({ popped: 'in' });\n  }\n\n  popOut() {\n    console.log('popOut');\n    this.setState({ popped: 'waiting' });\n  }\n\n  popupOpened() {\n    console.log('popupOpened');\n    this.setState({ popped: 'out' });\n  }\n\n  popupClosed() {\n    console.log('popupClosed');\n    this.setState({ popped: 'in' });\n  }\n\n  render() {\n    if (this.state.popped === 'in') {\n      return (\n        <>\n          <Content />\n          <button onClick={() => this.popOut()}>Pop out</button>\n        </>\n      );\n    } else if (this.state.popped === 'waiting') {\n      return (\n        <>\n          <PopupWindow\n            onOpen={() => this.popupOpened()}\n            onClose={() => this.popupClosed()}\n          >\n            <Content />\n          </PopupWindow>\n          <Content />\n          <button onClick={() => this.popOut()}>Pop out</button>\n        </>\n      );\n    } /* this.state.popped === 'out' */ else {\n      return (\n        <>\n          <PopupWindow\n            onOpen={() => this.popupOpened()}\n            onClose={() => this.popupClosed()}\n          >\n            <Content />\n          </PopupWindow>\n          <button onClick={() => this.popIn()}>Pop in</button>\n        </>\n      );\n    }\n  }\n}\n\ninterface PopupWindowProps {\n  onOpen?: () => void;\n  onClose?: () => void;\n}\n\ninterface PopupWindowState {\n  container?: HTMLElement;\n}\n\nclass PopupWindow extends React.PureComponent<\n  PopupWindowProps,\n  PopupWindowState\n> {\n  window?: Window;\n  timer?: number;\n\n  constructor(props: PopupWindowProps) {\n    super(props);\n    this.window = undefined;\n    this.state = {\n      container: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const popupWindow = window.open('', '', 'width=800, height=500');\n    if (!popupWindow) {\n      return;\n    }\n    this.window = popupWindow;\n    // Listen for close event\n    if (this.props.onClose) {\n      this.timer = window.setInterval(() => {\n        if (!this.window || this.window.closed) {\n          if (this.props.onClose) {\n            this.props.onClose();\n          }\n        }\n      }, 1000);\n    }\n    // Copy the app's styles into the new window\n    const stylesheets = Array.from(document.styleSheets);\n    stylesheets.forEach(stylesheet => {\n      const css = stylesheet as CSSStyleSheet;\n\n      if (stylesheet.href) {\n        const newStyleElement = document.createElement('link');\n        newStyleElement.rel = 'stylesheet';\n        newStyleElement.href = stylesheet.href;\n        popupWindow.document.head.appendChild(newStyleElement);\n      } else if (css && css.cssRules && css.cssRules.length > 0) {\n        const newStyleElement = document.createElement('style');\n        Array.from(css.cssRules).forEach(rule => {\n          newStyleElement.appendChild(document.createTextNode(rule.cssText));\n        });\n        popupWindow.document.head.appendChild(newStyleElement);\n      }\n    });\n    // Create a div for the content\n    const container = this.window.document.createElement('div');\n    this.window.document.body.appendChild(container);\n    this.setState({\n      container,\n    });\n    // Call the open callback\n    if (this.props.onOpen) {\n      this.props.onOpen();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      window.clearInterval(this.timer);\n      this.timer = undefined;\n    }\n    if (this.window) {\n      this.window.close();\n    }\n  }\n\n  render() {\n    if (this.state.container) {\n      return ReactDOM.createPortal(this.props.children, this.state.container);\n    } else {\n      return null;\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}